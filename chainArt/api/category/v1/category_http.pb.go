// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.15.5
// source: api/category/v1/category.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCategoryCreateCategory = "/api.category.v1.Category/CreateCategory"
const OperationCategoryGetCategory = "/api.category.v1.Category/GetCategory"
const OperationCategoryListCategory = "/api.category.v1.Category/ListCategory"

type CategoryHTTPServer interface {
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryReply, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryReply, error)
	ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryReply, error)
}

func RegisterCategoryHTTPServer(s *http.Server, srv CategoryHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/category/create", _Category_CreateCategory0_HTTP_Handler(srv))
	r.GET("/v1/category/getCategory", _Category_GetCategory0_HTTP_Handler(srv))
	r.POST("/v1/category/listCategory", _Category_ListCategory0_HTTP_Handler(srv))
}

func _Category_CreateCategory0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryCreateCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCategory(ctx, req.(*CreateCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Category_GetCategory0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryGetCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCategory(ctx, req.(*GetCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Category_ListCategory0_HTTP_Handler(srv CategoryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCategoryListCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCategory(ctx, req.(*ListCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCategoryReply)
		return ctx.Result(200, reply)
	}
}

type CategoryHTTPClient interface {
	CreateCategory(ctx context.Context, req *CreateCategoryRequest, opts ...http.CallOption) (rsp *CreateCategoryReply, err error)
	GetCategory(ctx context.Context, req *GetCategoryRequest, opts ...http.CallOption) (rsp *GetCategoryReply, err error)
	ListCategory(ctx context.Context, req *ListCategoryRequest, opts ...http.CallOption) (rsp *ListCategoryReply, err error)
}

type CategoryHTTPClientImpl struct {
	cc *http.Client
}

func NewCategoryHTTPClient(client *http.Client) CategoryHTTPClient {
	return &CategoryHTTPClientImpl{client}
}

func (c *CategoryHTTPClientImpl) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...http.CallOption) (*CreateCategoryReply, error) {
	var out CreateCategoryReply
	pattern := "/v1/category/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCategoryCreateCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CategoryHTTPClientImpl) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...http.CallOption) (*GetCategoryReply, error) {
	var out GetCategoryReply
	pattern := "/v1/category/getCategory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCategoryGetCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CategoryHTTPClientImpl) ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...http.CallOption) (*ListCategoryReply, error) {
	var out ListCategoryReply
	pattern := "/v1/category/listCategory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCategoryListCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
